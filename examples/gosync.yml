---

#########################
## Sync
#########################
sync:
  production: &production

    ## Base path for sync
    path: "./test/"

    connection:
      ssh: user@example.com

    #########################
    ## Filesystem rsync
    #########################
    filesystem:
    ## Sync /tmp/remote/path to ./test/ (defined before)
    - path: /tmp/remote/path
      filter:
        exclude:
        - .git
        - node_modules/

    ## Sync /tmp/remote/other/path to ./other/
    - path: /tmp/remote/other/path
      local: ./other/
      filter:
        exclude:
        - .git
        - node_modules/

    ## Create file stubs for /tmp/remote/other/path to ./other/
    - path: /tmp/remote/other/path-big-files
      local: ./other-stubs/
      options:
        generate-stubs: true

    #########################
    ## Database
    #########################
    database:

    ## NORMAL MYSQL
    ## Sync database typo3 to local test-local (without cache tables)
    ##
    ## remote: connect via ssh and get dump from local installed mysql
    ## local: connect via mysql to a database server "mysql.example.com"
    - type: mysql
      database: application1
      user: mysql-user
      password: mysql-password
      filter:
        exclude:
        - "^cache_.*"
        include:
      local:
        ## use plain mysql connection
        database: test-application1
        user: root
        password: dev
        port: 13306
        hostname: mysql.example.com
        options:
          # custom mysqldump options (for local)
          mysqldump:
          # custom mysql options (for local)
          mysql:
      options:
        ## clear database before restore
        ## (delete all tables inside)
        clear-database: true
        # custom mysqldump options (for remote)
        mysqldump:
        # custom mysql options (for remote)
        mysql:

    ## DOCKER
    ## Sync database typo3 to local test-local into a docker container
    ##
    ## remote: connect via ssh and get dump from local installed mysql
    ## local: use docker container "2713f9093bed" for restore
    - type: mysql
      database: application2
      user: mysql-user
      password: mysql-password
      filter:
        exclude:
        include:
      local:
        database: test-application2
        user: root
        password: dev
        connection:
          docker: 2713f9093bed
      options:
        ## clear database before restore
        ## (delete all tables inside)
        clear-database: true

    ## DOCKER-COMPOSE
    ## Sync database typo3 to local test-local into a docker-compose container
    ##
    ## docker-compose.yml has to be in the same or parent directory!
    ##
    ## remote: connect via ssh and get dump from local installed mysql
    ## local: use docker-compose container "mysql" for restore
    - type: mysql
      database: application3
      user: mysql-user
      password: mysql-password
      filter:
        exclude:
        include:
      local:
        database: test-application3
        user: root
        password: dev
        connection:
          docker: compose:mysql
      options:
        ## clear database before restore
        ## (delete all tables inside)
        clear-database: true

    #########################
    ## Execute
    #########################
    exec-startup:
    ## Execute date on local system
    - type: local
      command: date +%s

    ## Execute date on local system (alternative style)
    - type: local
      command:
      - date
      - +%s

    ## Execute date with workdir
    - type: local
      command:
      - date
      workdir: /

    ## Execute remote date with workdir
    - type: remote
      command: date
      workdir: /


    ## Execute remote date with workdir and custom environment settings
    - type: remote
      command: date
      workdir: /
      environment:
      - name: FOOBAR
        value: barfoo

    exec-finish:
    ## Execute remote date with workdir
    - type: remote
      command: date
      workdir: /

#########################
## Deploy
#########################
deploy:
  production: &foobar
    path: "./test/"

    connection:
      ssh: user@example.com

    filesystem:
    - path: /tmp/path
      filter:
        exclude:
        - .git
        - node_modules/

    - path: /tmp/other/path
      local: ./other/
      filter:
        exclude:
        - .git
        - node_modules/

    database:
      - type: mysql
        database: foobar
        user: mysql-user
        password: mysql-password
        filter:
          exclude:
          include:
        local:
          database: test
          user: root
          password: dev
          connection:
            docker: compose:mysql
            ssh: foo@example.com
        options:
          clear-database: true

  production2:
    <<: *foobar
